# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pexpect/ANSI.py
+++ b/..//venv/lib/python3.8/site-packages/pexpect/ANSI.py
@@ -34,70 +34,213 @@
 # The 'Do.*' functions are helper functions for the ANSI class.
 #
 def DoEmit (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.write_ch(fsm.input_symbol)
 
 def DoStartNumber (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     fsm.memory.append (fsm.input_symbol)
 
 def DoBuildNumber (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     ns = fsm.memory.pop()
     ns = ns + fsm.input_symbol
     fsm.memory.append (ns)
 
 def DoBackOne (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.cursor_back ()
 
 def DoBack (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     count = int(fsm.memory.pop())
     screen = fsm.memory[0]
     screen.cursor_back (count)
 
 def DoDownOne (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.cursor_down ()
 
 def DoDown (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     count = int(fsm.memory.pop())
     screen = fsm.memory[0]
     screen.cursor_down (count)
 
 def DoForwardOne (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.cursor_forward ()
 
 def DoForward (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     count = int(fsm.memory.pop())
     screen = fsm.memory[0]
     screen.cursor_forward (count)
 
 def DoUpReverse (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.cursor_up_reverse()
 
 def DoUpOne (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.cursor_up ()
 
 def DoUp (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     count = int(fsm.memory.pop())
     screen = fsm.memory[0]
     screen.cursor_up (count)
 
 def DoHome (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     c = int(fsm.memory.pop())
     r = int(fsm.memory.pop())
@@ -105,6 +248,17 @@
     screen.cursor_home (r,c)
 
 def DoHomeOrigin (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     c = 1
     r = 1
@@ -112,11 +266,33 @@
     screen.cursor_home (r,c)
 
 def DoEraseDown (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.erase_down()
 
 def DoErase (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     arg = int(fsm.memory.pop())
     screen = fsm.memory[0]
@@ -128,11 +304,33 @@
         screen.erase_screen()
 
 def DoEraseEndOfLine (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.erase_end_of_line()
 
 def DoEraseLine (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     arg = int(fsm.memory.pop())
     screen = fsm.memory[0]
@@ -144,21 +342,65 @@
         screen.erase_line()
 
 def DoEnableScroll (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.scroll_screen()
 
 def DoCursorSave (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.cursor_save_attrs()
 
 def DoCursorRestore (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     screen.cursor_restore_attrs()
 
 def DoScrollRegion (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     r2 = int(fsm.memory.pop())
@@ -166,12 +408,34 @@
     screen.scroll_screen_rows (r1,r2)
 
 def DoMode (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     mode = fsm.memory.pop() # Should be 4
     # screen.setReplaceMode ()
 
 def DoLog (fsm):
+    """
+
+    Parameters
+    ----------
+    fsm :
+        
+
+    Returns
+    -------
+
+    """
 
     screen = fsm.memory[0]
     fsm.memory = [screen]
@@ -181,19 +445,35 @@
 
 class term (screen.screen):
 
-    '''This class is an abstract, generic terminal.
+    """This class is an abstract, generic terminal.
     This does nothing. This is a placeholder that
     provides a common base class for other terminals
-    such as an ANSI terminal. '''
+    such as an ANSI terminal.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     def __init__ (self, r=24, c=80, *args, **kwargs):
 
         screen.screen.__init__(self, r,c,*args,**kwargs)
 
 class ANSI (term):
-    '''This class implements an ANSI (VT100) terminal.
+    """This class implements an ANSI (VT100) terminal.
     It is a stream filter that recognizes ANSI terminal
-    escape sequences and maintains the state of a screen object. '''
+    escape sequences and maintains the state of a screen object.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     def __init__ (self, r=24,c=80,*args,**kwargs):
 
@@ -279,18 +559,48 @@
         self.state.add_transition (';', 'NUMBER_X', None, 'SEMICOLON_X')
 
     def process (self, c):
-        """Process a single character. Called by :meth:`write`."""
+        """Process a single character. Called by :meth:`write`.
+
+        Parameters
+        ----------
+        c :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(c, bytes):
             c = self._decode(c)
         self.state.process(c)
 
     def process_list (self, l):
+        """
+
+        Parameters
+        ----------
+        l :
+            
+
+        Returns
+        -------
+
+        """
 
         self.write(l)
 
     def write (self, s):
         """Process text, writing it to the virtual screen while handling
         ANSI escape codes.
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
         """
         if isinstance(s, bytes):
             s = self._decode(s)
@@ -298,12 +608,23 @@
             self.process(c)
 
     def flush (self):
+        """ """
         pass
 
     def write_ch (self, ch):
-        '''This puts a character at the current cursor position. The cursor
+        """This puts a character at the current cursor position. The cursor
         position is moved forward with wrap-around, but no scrolling is done if
-        the cursor hits the lower-right corner of the screen. '''
+        the cursor hits the lower-right corner of the screen.
+
+        Parameters
+        ----------
+        ch :
+            
+
+        Returns
+        -------
+
+        """
 
         if isinstance(ch, bytes):
             ch = self._decode(ch)
@@ -334,18 +655,48 @@
                 self.erase_line()
 
     def do_sgr (self, fsm):
-        '''Select Graphic Rendition, e.g. color. '''
+        """Select Graphic Rendition, e.g. color.
+
+        Parameters
+        ----------
+        fsm :
+            
+
+        Returns
+        -------
+
+        """
         screen = fsm.memory[0]
         fsm.memory = [screen]
 
     def do_decsca (self, fsm):
-        '''Select character protection attribute. '''
+        """Select character protection attribute.
+
+        Parameters
+        ----------
+        fsm :
+            
+
+        Returns
+        -------
+
+        """
         screen = fsm.memory[0]
         fsm.memory = [screen]
 
     def do_modecrap (self, fsm):
-        '''Handler for \x1b[?<number>h and \x1b[?<number>l. If anyone
+        """Handler for \x1b[?<number>h and \x1b[?<number>l. If anyone
         wanted to actually use these, they'd need to add more states to the
-        FSM rather than just improve or override this method. '''
+        FSM rather than just improve or override this method.
+
+        Parameters
+        ----------
+        fsm :
+            
+
+        Returns
+        -------
+
+        """
         screen = fsm.memory[0]
         fsm.memory = [screen]
